using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.IO;
using Trirand.Web.Mvc;
using System.Data;
using i3C.Business.Services;
using i3C.Presentation.MVC.Razor;
using System.Data.Objects;
using eTIMs.Models.DataSets;
using eTIMs.Models;
using Trirand.Web.Mvc;

namespace eTIMs.Controllers
{
    public class MasterController : Controller
    {
        private DistrictDBContext dbDistrict = new DistrictDBContext();
        private SchoolDBContext dbSchool = new SchoolDBContext();
        private DeliveryDBContext dbDelivery = new DeliveryDBContext();
        private TabletDBContext dbTablet = new TabletDBContext();
        string applicationPath;
        private string sessionDistrictId;

        public MasterController()
        {
            sessionDistrictId = (string)System.Web.HttpContext.Current.Session["district_id"];
        }

        public ActionResult Index()
        {
            return View();
        }

        protected void IncludeMessages()
        {
            if ((string)System.Web.HttpContext.Current.Session["error_message"] != "" && (string)System.Web.HttpContext.Current.Session["error_message"] != null)
            {
                var error_message = Session["error_message"];
                Session["error_message"] = "";
                ViewBag.error_message = error_message;
            }
            if ((string)System.Web.HttpContext.Current.Session["success_message"] != "" && (string)System.Web.HttpContext.Current.Session["success_message"] != null)
            {
                var success_message = Session["success_message"];
                Session["success_message"] = "";
                ViewBag.success_message = success_message;
            }
        }

        #region District

        public ActionResult District()
        {
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new DistrictMasterModel();
            var lotsGrid = gridModel.DistrictMasterGrid;

            // customize the default Orders grid model with custom settings
            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            IncludeMessages();
            // Pass the custmomized grid model to the View

            return View(gridModel);

        }

        // This method is called when the grid requests data
        public JsonResult DistrictMasterSearchGridDataRequested(string searchText = "")
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new DistrictMasterModel();
            var masterModel = new MasterDataContext();

            // customize the default Orders grid model with our custom settings

            var result = from dl in masterModel.DDistricts
                         where dl.Id.Contains(searchText) || dl.Name.Contains(searchText)
                         select dl;


            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            gridModel.DistrictMasterGrid.DataSource = result;
            return gridModel.DistrictMasterGrid.DataBind(result);

            //gridModel.DistrictMasterGrid.DataSource = result;
            //return gridModel.DistrictMasterGrid.DataBind(result);
            //return gridModel.DistrictMasterGrid.DataBind(masterModel.DDistricts);
        }

        public ActionResult DistrictMasterEditRows(DDistrict editedRow)
        {
            // Get the grid and database (northwind) models
            var gridModel = new DistrictMasterModel();
            var masterModel = new MasterDataContext();

            if (gridModel.DistrictMasterGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
            {

                // delete the record
                var result = from dl in masterModel.DDistricts
                             where dl.Id == editedRow.Id
                             select dl;

                foreach (var item in result)
                {
                    masterModel.DDistricts.DeleteOnSubmit(item);
                    masterModel.SubmitChanges();
                    
                }

            }

            if (gridModel.DistrictMasterGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
            {

                // delete the record
                var result = from dl in masterModel.DDistricts
                             where dl.Id == editedRow.Id
                             select dl;

                foreach (var item in result)
                {
                    item.Name = editedRow.Name;
                    item.Address = editedRow.Address;
                    item.Tel1 = editedRow.Tel1;
                    item.Tel2 = editedRow.Tel2;
                    item.Supervisor = editedRow.Supervisor;
                    masterModel.SubmitChanges();
                }

            }

            return new ContentResult { Content = "" };
        }

        #endregion

        #region School
        //
        // GET: /District/Count

        public ActionResult School()
        {
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new SchoolMasterModel();
            var lotsGrid = gridModel.SchoolMasterGrid;

            // customize the default Orders grid model with custom settings
            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            IncludeMessages();

            // Pass the custmomized grid model to the View
            return View(gridModel);

        }

        public void SchoolMasterSearchAflliateRequested(int districtID = 101001)
        {

        }


        // This method is called when the grid requests data
        public JsonResult SchoolMasterSearchGridDataRequested(int districtID = 101001, int affiliateID =0 , string searchText = "")
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new SchoolMasterModel();
            var masterModel = new MasterDataContext();
            
            // customize the default Orders grid model with our custom settings
            var result = from dl in masterModel.SSchools
                         where dl.SchoolAffiliateCode==affiliateID.ToString() && dl.DistrictId == districtID.ToString() && (dl.Id.Contains(searchText) || dl.Name.Contains(searchText))
                         select dl;
            if (affiliateID == 0)
                result = from dl in masterModel.SSchools
                         where  dl.DistrictId == districtID.ToString() && (dl.Id.Contains(searchText) || dl.Name.Contains(searchText))
                         select dl;



            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            gridModel.SchoolMasterGrid.DataSource = result;
            return gridModel.SchoolMasterGrid.DataBind(result);
            //return gridModel.SchoolMasterGrid.DataBind(masterModel.SSchools);
        }

        // This method is called when the grid requests data
        public JsonResult SchoolMasterSearchGridDataRequestedFilter(int districtID = 101001, string searchText = "")
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new SchoolMasterModel();
            var masterModel = new MasterDataContext();

            // customize the default Orders grid model with our custom settings

            var result = from dl in masterModel.SSchools
                         where dl.DistrictId == districtID.ToString() && (dl.Id.Contains(searchText) || dl.Name.Contains(searchText))
                         select dl;


            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            gridModel.SchoolMasterGrid.DataSource = result;
            return gridModel.SchoolMasterGrid.DataBind(result);
            //return gridModel.SchoolMasterGrid.DataBind(masterModel.SSchools);
        }


        public ActionResult SchoolMasteEditRows(SSchool editedRow)
        {
            // Get the grid and database (northwind) models
            var gridModel = new SchoolMasterModel();
            var masterModel = new MasterDataContext();

            if (gridModel.SchoolMasterGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
            {

                // delete the record
                var result = from dl in masterModel.SSchools
                             where dl.Id == editedRow.Id
                             select dl;

                foreach (var item in result)
                {
                    masterModel.SSchools.DeleteOnSubmit(item);
                    masterModel.SubmitChanges();
                }

            }

            if (gridModel.SchoolMasterGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
            {

                // delete the record
                var result = from dl in masterModel.SSchools
                             where dl.Id == editedRow.Id
                             select dl;

                foreach (var item in result)
                {
                    item.Name = editedRow.Name;
                    item.Address = editedRow.Address;
                    item.Tel1 = editedRow.Tel1;
                    item.Tel2 = editedRow.Tel2;
                    item.Supervisor = editedRow.Supervisor;
                    masterModel.SubmitChanges();
                }

            }

            return new ContentResult { Content = "" };
        }

        #endregion

        #region Student
        //
        // GET: /District/Count

        public ActionResult Student()
        {
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new StudentMasterModel();
            var studentGrid = gridModel.StudentMasterGrid;

            // customize the default Orders grid model with custom settings
            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            IncludeMessages();

            // Pass the custmomized grid model to the View
            return View(gridModel);

        }

        // This method is called when the grid requests data
        public JsonResult StudentMasterSearchGridDataRequested(int schoolID = 100001, int affiliateId =0, string searchText = "")
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new StudentMasterModel();
            var masterModel = new MasterDataContext();

            // customize the default Orders grid model with our custom settings

            var result = from dl in masterModel.SStudents
                         join school in masterModel.SSchools on dl.SchoolId equals school.Id
                         join district in masterModel.DDistricts on school.DistrictId equals district.Id
                         where school.SchoolAffiliateCode==affiliateId.ToString() &&  dl.SchoolId == schoolID.ToString() && (dl.IDNo.Contains(searchText) || dl.FirstName.Contains(searchText) || dl.LastName.Contains(searchText))
                         select new
                         {
                             Id = dl.Id,
                             IDNo = dl.IDNo,
                             FirstName = dl.FirstName,
                             LastName = dl.LastName,
                             DistritName = district.Name,
                             SchoolName = school.Name,
                             Address = dl.Address,
                             Tel = dl.Tel
                         };

            if (schoolID == 0 && affiliateId==0)
                result = from dl in masterModel.SStudents
                         join school in masterModel.SSchools on dl.SchoolId equals school.Id
                         join district in masterModel.DDistricts on school.DistrictId equals district.Id
                         where (dl.IDNo.Contains(searchText) || dl.FirstName.Contains(searchText) || dl.LastName.Contains(searchText))
                         select new
                         {
                             Id = dl.Id,
                             IDNo = dl.IDNo,
                             FirstName = dl.FirstName,
                             LastName = dl.LastName,
                             DistritName = district.Name,
                             SchoolName = school.Name,
                             Address = dl.Address,
                             Tel = dl.Tel
                         };
            if (schoolID != 0 && affiliateId == 0)
                result = from dl in masterModel.SStudents
                         join school in masterModel.SSchools on dl.SchoolId equals school.Id
                         join district in masterModel.DDistricts on school.DistrictId equals district.Id
                         where  dl.SchoolId == schoolID.ToString() && (dl.IDNo.Contains(searchText) || dl.FirstName.Contains(searchText) || dl.LastName.Contains(searchText))
                         select new
                         {
                             Id = dl.Id,
                             IDNo = dl.IDNo,
                             FirstName = dl.FirstName,
                             LastName = dl.LastName,
                             DistritName = district.Name,
                             SchoolName = school.Name,
                             Address = dl.Address,
                             Tel = dl.Tel
                         };
            if (schoolID == 0 && affiliateId != 0)
                result = from dl in masterModel.SStudents
                         join school in masterModel.SSchools on dl.SchoolId equals school.Id
                         join district in masterModel.DDistricts on school.DistrictId equals district.Id
                         where school.SchoolAffiliateCode == affiliateId.ToString() && (dl.IDNo.Contains(searchText) || dl.FirstName.Contains(searchText) || dl.LastName.Contains(searchText))
                         select new
                         {
                             Id = dl.Id,
                             IDNo = dl.IDNo,
                             FirstName = dl.FirstName,
                             LastName = dl.LastName,
                             DistritName = district.Name,
                             SchoolName = school.Name,
                             Address = dl.Address,
                             Tel = dl.Tel
                         };


            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            gridModel.StudentMasterGrid.DataSource = result;
            return gridModel.StudentMasterGrid.DataBind(result);
            //return gridModel.StudentMasterGrid.DataBind(masterModel.SStudents);
        }

        public ActionResult StudentMasteEditRows(SStudent editedRow)
        {
            // Get the grid and database (northwind) models
            var gridModel = new StudentMasterModel();
            var masterModel = new MasterDataContext();

            if (gridModel.StudentMasterGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
            {

                // delete the record
                var result = from dl in masterModel.SStudents
                             where dl.Id == editedRow.Id
                             select dl;

                foreach (var item in result)
                {
                    masterModel.SStudents.DeleteOnSubmit(item);
                    masterModel.SubmitChanges();
                }

            }

            if (gridModel.StudentMasterGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
            {

                // delete the record
                var result = from dl in masterModel.SStudents
                             where dl.Id == editedRow.Id
                             select dl;

                foreach (var item in result)
                {
                    item.IDNo = editedRow.IDNo;
                    item.FirstName = editedRow.FirstName;
                    item.LastName = editedRow.LastName;
                    item.Address = editedRow.Address;
                    item.Tel = editedRow.Tel;
                    masterModel.SubmitChanges();
                }
            }
            return new ContentResult { Content = "" };
        }

        public ActionResult getSchoolDDL(int districtID, int affiliateId = 0)
        {
            var masterModel = new MasterDataContext();
            var result = from dl in masterModel.SSchools
                         where dl.DistrictId == districtID.ToString()
                         orderby dl.Name
                         select dl;
            if (affiliateId != 0)
                result = from dl in masterModel.SSchools
                         where dl.SchoolAffiliateCode == affiliateId.ToString() && dl.DistrictId == districtID.ToString()
                         orderby dl.Name
                         select dl;
            return Json(new SelectList(result.ToArray(), "Id", "Name"), JsonRequestBehavior.AllowGet);
            //return PartialView();
        }

        public ActionResult getAffiliateDDL()
        {
            var masterModel = new MasterDataContext();
            var result = from dl in masterModel.SSchoolAffiliates
                      
                         orderby dl.SchoolAffiliateName
                         select dl;
            return Json(new SelectList(result.ToArray(), "SchoolAffiliateCode", "SchoolAffiliateName"), JsonRequestBehavior.AllowGet);
            //return PartialView();
        }

        public ActionResult getLotDDL(int districtID)
        {
            string id = districtID.ToString();
            var masterModel = new MasterDataContext();
            var result = from dl in masterModel.DDeliveryLots
                         join district in masterModel.DDistributors on dl.SenderId equals district.Id
                         where district.DistrictId == id
                         select dl;

            return Json(new SelectList(result.ToArray(), "LotNo", "PlannedTabletCount"), JsonRequestBehavior.AllowGet);
            //return PartialView();
        }

        public ActionResult getSchoolDDLUserDistrict(int affiliateId = 0)
        {
            var masterModel = new MasterDataContext();
            var result = from dl in masterModel.SSchools
                         where dl.DistrictId == sessionDistrictId
                         orderby dl.Name
                         select dl;
            if (affiliateId!=0)
                result = from dl in masterModel.SSchools
                         where dl.SchoolAffiliateCode==affiliateId.ToString() && dl.DistrictId == sessionDistrictId
                         orderby dl.Name
                         select dl;
            return Json(new SelectList(result.ToArray(), "Id", "Name"), JsonRequestBehavior.AllowGet);

        }

        public ActionResult getDistrictDDL()
        {
            var masterModel = new MasterDataContext();
            var result = from dl in masterModel.DDistricts
                         orderby dl.Name
                         select dl;
            return Json(new SelectList(result.ToArray(), "Id", "Name"), JsonRequestBehavior.AllowGet);
        }

        public ActionResult getLotTabletAllDDL()
        {
            var masterModel = new MasterDataContext();
            var result = (from dl in masterModel.DDeliveryLots
                         join tablets in masterModel.DDeliveryLot_Tablets on dl.Id equals tablets.DeliveryLotId
                         where dl.LotTypeId  == 1
                         select new
                         {
                            Id = dl.Id,
                            LotNo = dl.LotNo,
                            TabletSerail = tablets.TabletSerialNo
                         }).GroupBy(dl => dl.Id)
                         .Select(g => new 
                         {
                             Id = g.Key,
                             Count = g.Select(data => data.TabletSerail).Distinct().Count(),
                             LotNo = g.Select(data => data.LotNo).Distinct().First()
                         }).Where(g => g.Count != 0);
            return Json(new SelectList(result.ToArray(), "Id", "LotNo"), JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region UserList

        public ActionResult TabletUserList()
        {
            //Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new SchoolManageStudentModel();
            var lotsGrid = gridModel.SchoolManageStudentGrid;
            //customize the default Orders grid model with custom settings
            //NOTE: you need to call this method in the action that fetches the data as well,
            //so that the models match
            IncludeMessages();

            //Pass the custmomized grid model to the View
            return View(gridModel);

        }

        public JsonResult TabletUserListSearchGridDataRequested(string searchText = "")
        {
            //Get both the grid Model and the data Model
            //The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new SchoolManageStudentModel();
            var masterModel = new MasterDataContext();

            var result = from students in masterModel.SStudents
                         join student_tablet in masterModel.SStudent_Tablets
                           on students.Id equals student_tablet.StudentId into temp
                         from studentTablet in temp.DefaultIfEmpty()
                         where (studentTablet.IsActive == true || studentTablet.IsActive == null) && students.FirstName != "SPARE" && (students.IDNo.Contains(searchText) || students.FirstName.Contains(searchText) || students.LastName.Contains(searchText))
                         select new SchoolManageStudentClassModel
                         {
                             id = students.Id,
                             IDNo = students.IDNo,
                             StudentNo = students.StudentNo,
                             FirstName = students.FirstName,
                             LastName = students.LastName,
                             TabletSerialNo = studentTablet.TabletSerialNo
                         };


            //return the result of the DataBind method, passing the datasource as a parameter
            //jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            gridModel.SchoolManageStudentGrid.DataSource = result;
            return gridModel.SchoolManageStudentGrid.DataBind(result);
            //return gridModel.TabletMasterGrid.DataBind(masterModel.TTablets);
        }

        #endregion

        #region Tablet User Detail

        public ActionResult TabletUserDetail(int id)
        {
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new TabletUserDetailModel();
            var lotsGrid = gridModel.TabletUserDetailGrid;

            // customize the default Orders grid model with custom settings
            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            IncludeMessages();
            var newGridModel = new TabletUserDetailPageModel();
            newGridModel.gridModel = gridModel;

            var masterModel = new MasterDataContext();
            var result = from students in masterModel.SStudents
                         where students.Id == id
                         select students;
            newGridModel.id = id;
            newGridModel.Name = result.FirstOrDefault().Title + " " + result.FirstOrDefault().FirstName + " " + result.FirstOrDefault().LastName;
            // Pass the custmomized grid model to the View
            return View(newGridModel);

        }

        public JsonResult TabletUserDetailSearchGridDataRequested(int id = 0)
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new TabletUserDetailModel();
            var masterModel = new MasterDataContext();

            // customize the default Orders grid model with our custom settings

            var result = from student_tablets in masterModel.SStudent_Tablets
                         join tablets in masterModel.TTablets on student_tablets.TabletSerialNo equals tablets.SerialNo
                         join students in masterModel.SStudents on student_tablets.StudentId equals students.Id
                         where students.Id == id
                         orderby student_tablets.Created
                         select new TabletUserDetailQueryModel
                         {
                             SerialNumber = tablets.SerialNo,
                             MacAddress = tablets.MacAddress,
                             Updated = student_tablets.Created
                         };
            gridModel.TabletUserDetailGrid.DataSource = result;
            return gridModel.TabletUserDetailGrid.DataBind(result);

            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            //return gridModel.TabletMasterGrid.DataBind(masterModel.TTablets);
        }

        #endregion

        #region Tablet

        public ActionResult Tablet()
        {
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new TabletMasterModel();
            var lotsGrid = gridModel.TabletMasterGrid;

            // customize the default Orders grid model with custom settings
            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            IncludeMessages();

            // Pass the custmomized grid model to the View
            return View(gridModel);

        }

        public JsonResult TabletMasterSearchGridDataRequested(int LotID = 0, string searchText = "")
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new TabletMasterModel();
            var masterModel = new MasterDataContext();

            // customize the default Orders grid model with our custom settings
            if (LotID != 0)
            {
                var result = from dl in dbDelivery.DeliveryLots_Tablets
                             join tablets in dbDelivery.Tablets on dl.TabletSerialNo equals tablets.SerialNo
                             join lots in dbDelivery.DeliveryLots on dl.DeliveryLotId equals lots.Id
                             where lots.LotTypeId == 1 && dl.DeliveryLotId == LotID && (dl.TabletSerialNo.Contains(searchText) || tablets.MacAddress.Contains(searchText))
                             select new TabletQueryModel
                             {
                                 SerialNo = tablets.SerialNo != null ? tablets.SerialNo : "",
                                 MacAddress = tablets.MacAddress != null ? tablets.MacAddress : "",
                                 GoodNo = tablets.GoodNo != null ? tablets.GoodNo : "",
                                 Color = tablets.Color,
                                 LotNo = lots.LotNo,
                                 Status = "Shipping"//tablets.Status == 3 ? "Shipping" : tablets.Status == 2 ? "Error" : "Shipped"
                             };
                gridModel.TabletMasterGrid.DataSource = result;
                return gridModel.TabletMasterGrid.DataBind(result);
            }
            else
            {
                var result = from dl in dbDelivery.DeliveryLots_Tablets
                             join tablets in dbDelivery.Tablets on dl.TabletSerialNo equals tablets.SerialNo
                             join lots in dbDelivery.DeliveryLots on dl.DeliveryLotId equals lots.Id
                             where lots.LotTypeId == 1 && (dl.TabletSerialNo.Contains(searchText) || tablets.MacAddress.Contains(searchText))
                             select new TabletQueryModel
                             {
                                 SerialNo = tablets.SerialNo != null ? tablets.SerialNo : "",
                                 MacAddress = tablets.MacAddress != null ? tablets.MacAddress : "",
                                 GoodNo = tablets.GoodNo != null ? tablets.GoodNo : "",
                                 Color = tablets.Color,
                                 LotNo = lots.LotNo,
                                 Status = "Shipping"//tablets.Status == 3 ? "Shipping" : tablets.Status == 2 ? "Error" : "Shipped"
                             };
                gridModel.TabletMasterGrid.DataSource = result;
                return gridModel.TabletMasterGrid.DataBind(result);
            }
            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            //return gridModel.TabletMasterGrid.DataBind(masterModel.TTablets);
        }


        public ActionResult TabletMasterEditRows(TTablet editedRow)
        {
            // Get the grid and database (northwind) models
            var gridModel = new TabletMasterModel();
            var masterModel = new MasterDataContext();

            if (gridModel.TabletMasterGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
            {

                // delete the record
                var result = from dl in masterModel.TTablets
                             where dl.SerialNo == editedRow.SerialNo
                             select dl;

                foreach (var item in result)
                {
                    masterModel.TTablets.DeleteOnSubmit(item);
                    masterModel.SubmitChanges();
                }

            }

            if (gridModel.TabletMasterGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
            {

                // delete the record
                var result = from dl in masterModel.TTablets
                             where dl.SerialNo == editedRow.SerialNo
                             select dl;

                foreach (var item in result)
                {
                    item.SerialNo = editedRow.SerialNo;
                    item.MacAddress = editedRow.MacAddress;
                    item.Color = editedRow.Color;
                    masterModel.SubmitChanges();
                }
            }
            return new ContentResult { Content = "" };
        }
        
        #endregion

        #region Tablet Document

        public ActionResult TabletDocument()
        {
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new TabletDocumentMasterModel();
            var lotsGrid = gridModel.TabletMasterGrid;

            // customize the default Orders grid model with custom settings
            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            IncludeMessages();

            // Pass the custmomized grid model to the View
            return View(gridModel);

        }

        public JsonResult TabletDocumentMasterSearchGridDataRequested(int LotID = 0, string searchText = "")
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new TabletDocumentMasterModel();
            var masterModel = new MasterDataContext();

            // customize the default Orders grid model with our custom settings
            int rowNumber = 1;
            if (LotID != 0)
            {
                var result = from dl in dbDelivery.DeliveryLots_Tablets
                             join tablets in dbDelivery.Tablets on dl.TabletSerialNo equals tablets.SerialNo
                             join lots in dbDelivery.DeliveryLots on dl.DeliveryLotId equals lots.Id
                             where lots.LotTypeId == 1 && dl.DeliveryLotId == LotID && (dl.TabletSerialNo.Contains(searchText) || tablets.MacAddress.Contains(searchText))
                             select new TabletQueryModel
                             {
                                 SerialNo = tablets.SerialNo != null ? tablets.SerialNo : "",
                                 MacAddress = tablets.MacAddress != null ? tablets.MacAddress : "",
                                 GoodNo = tablets.GoodNo != null ? tablets.GoodNo : "",
                                 Color = tablets.Color,
                                 LotNo = lots.LotNo,
                                 Remark = tablets.Remark,
                                 attachFile = tablets.attachFile
                             };
                gridModel.TabletMasterGrid.DataSource = result;
                return gridModel.TabletMasterGrid.DataBind(result);
            }
            else
            {
                var result = from dl in dbDelivery.DeliveryLots_Tablets
                             join tablets in dbDelivery.Tablets on dl.TabletSerialNo equals tablets.SerialNo
                             join lots in dbDelivery.DeliveryLots on dl.DeliveryLotId equals lots.Id
                             where lots.LotTypeId == 1 && (dl.TabletSerialNo.Contains(searchText) || tablets.MacAddress.Contains(searchText))
                             select new TabletQueryModel
                             {
                                 SerialNo = tablets.SerialNo != null ? tablets.SerialNo : "",
                                 MacAddress = tablets.MacAddress != null ? tablets.MacAddress : "",
                                 GoodNo = tablets.GoodNo != null ? tablets.GoodNo : "",
                                 Color = tablets.Color,
                                 LotNo = lots.LotNo,
                                 Remark = tablets.Remark,
                                 attachFile = tablets.attachFile
                             };
                gridModel.TabletMasterGrid.DataSource = result;
                return gridModel.TabletMasterGrid.DataBind(result);
            }
            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            //return gridModel.TabletMasterGrid.DataBind(masterModel.TTablets);
        }


        public ActionResult TabletDocumentMasterEditRows(TTablet editedRow)
        {
            // Get the grid and database (northwind) models
            var gridModel = new TabletDocumentMasterModel();
            var masterModel = new MasterDataContext();

            if (gridModel.TabletMasterGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
            {

                // delete the record
                var result = from dl in masterModel.TTablets
                             where dl.SerialNo == editedRow.SerialNo
                             select dl;

                foreach (var item in result)
                {
                    masterModel.TTablets.DeleteOnSubmit(item);
                    masterModel.SubmitChanges();
                }

            }

            if (gridModel.TabletMasterGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
            {

                // delete the record
                var result = from dl in masterModel.TTablets
                             where dl.SerialNo == editedRow.SerialNo
                             select dl;

                foreach (var item in result)
                {
                    item.SerialNo = editedRow.SerialNo;
                    item.MacAddress = editedRow.MacAddress;
                    item.Color = editedRow.Color;
                    item.Remark = editedRow.Remark;
                    masterModel.SubmitChanges();
                }
            }
            return new ContentResult { Content = "" };
        }

        #endregion


        #region New Claimed Tablet

        public ActionResult TabletAttachDocument(string id)
        {
            var newTablet = new SchoolCountTabletModel();
            newTablet.SerialNo = id;
            //Get the model (setup) of the grid defined in the /Models folder.
            //customize the default Orders grid model with custom settings
            //NOTE: you need to call this method in the action that fetches the data as well,
            //so that the models mathc
            IncludeMessages();

            //gridModel.LotNo = deliveryLotList.First().LotNo;

            //Pass the custmomized grid model to the View
            return View(newTablet);

        }

        [HttpPost]
        public ActionResult TabletAttachDocumentSubmit(FormCollection collection, HttpPostedFileBase file)
        {
            var masterModel = new MasterDataContext();

            //edit the record
            Boolean saveResult = true;
            string oldSerialNo = collection[0].ToString();
            #region Upload excel file

            bool error = false;
            applicationPath = Server.MapPath("..");
            string filePath = applicationPath + "\\ImportedFile\\TabletAttachment";
            string fileName = "";
            string[] uploadedFile;

            if (file != null && file.ContentLength > 0)
            {
                // extract only the fielname

                //if (file.ContentType != "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                if(false)
                {
                    Session["error_message"] = "ไฟล์ที่แนบไม่ใช่ไฟล์เอกสารที่กำหนด (.xlsx)";
                    error = true;
                }
                else
                {
                    uploadedFile = uploadFile(file, filePath);
                    filePath = uploadedFile[1];
                    fileName = uploadedFile[0];
                    //var uploadedfileName = Path.GetFileName(file.FileName);
                    //// store the file inside ~/App_Data/uploads folder
                    //var path = Path.Combine(filePath, uploadedfileName);
                    //file.SaveAs(path);
                    //fileName = uploadedfileName;
                }

            }
            else
            {
                Session["error_message"] = "กรุณาแนบไฟล์";
                error = true;
            }


            if (error)
            {
                return RedirectToAction("TabletDocument", "Master");
            }


            #endregion

            try
            {

                var result = from dl in masterModel.TTablets
                             where dl.SerialNo == oldSerialNo
                             select dl;
                foreach (var item in result)
                {
                    item.attachFile = filePath.Substring(filePath.Length - 10,10) + "/" + fileName;
                    masterModel.SubmitChanges();
                }

                Session["success_message"] = "แนบเอกสารเสร็จสิ้น";
                saveLog("Save Attach File Tablet: " + collection[0].ToString(), GlobalService.UserId, this.RouteData.Values["controller"].ToString(), this.RouteData.Values["action"].ToString(), System.Reflection.MethodBase.GetCurrentMethod().Name, false);
            }
            catch (Exception e)
            {
                saveLog("Error Attach File Tablet: " + collection[0].ToString(), GlobalService.UserId, this.RouteData.Values["controller"].ToString(), this.RouteData.Values["action"].ToString(), System.Reflection.MethodBase.GetCurrentMethod().Name, true);
                saveResult = false;
            }

            return RedirectToAction("TabletDocument");
        }

        #endregion


        #region Tablet Delivery Detail

        public ActionResult TabletDeliveryDetail(string id)
        {
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new TabletDeliveryDetailModel();
            var lotsGrid = gridModel.TabletDeliveryDetailGrid;

            // customize the default Orders grid model with custom settings
            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            IncludeMessages();
            var newGridModel = new TabletDeliveryDetailPageModel();
            newGridModel.gridModel = gridModel;
            newGridModel.TabletSerialNumber = id;
            // Pass the custmomized grid model to the View
            return View(newGridModel);

        }

        public JsonResult TabletDeliveryDetailSearchGridDataRequested(string tabletSerialNo = "")
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new TabletDeliveryDetailModel();
            var masterModel = new MasterDataContext();

            // customize the default Orders grid model with our custom settings

            var result = from dl in masterModel.DDeliveryLot_Tablets
                         join lots in masterModel.DDeliveryLots on dl.DeliveryLotId equals lots.Id
                         join distributor in masterModel.DDistributors on lots.ReceiverId equals distributor.Id
                         where dl.TabletSerialNo == tabletSerialNo
                         orderby lots.Created 
                         select new TabletDeliveryDetailQueryModel
                         {
                             Name = distributor.DistrictId != null ? "เขต" + distributor.Name : distributor.SchoolId != null ? "โรงเรียน" + distributor.Name : distributor.Name,
                             Inventory = dl.Inventory,
                             Updated = lots.Created
                         };
            gridModel.TabletDeliveryDetailGrid.DataSource = result;
            return gridModel.TabletDeliveryDetailGrid.DataBind(result.DefaultIfEmpty());

            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            //return gridModel.TabletMasterGrid.DataBind(masterModel.TTablets);
        }


        #endregion

        #region TabletCountLotSelect

        public ActionResult TabletCountLotSelect()
        {
            var gridModel = new TabletCountSelectModel();
            var lotsGrid = gridModel.TabletCountSelectGrid;

            //// customize the default Orders grid model with custom settings
            //// NOTE: you need to call this method in the action that fetches the data as well,
            //// so that the models match
            IncludeMessages();

            //// Pass the custmomized grid model to the View
            return View(gridModel);

        }

        // This method is called when the grid requests data
        public JsonResult TabletCountLotSelectSearchGridDataRequested()
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new TabletCountSelectModel();
            var masterModel = new MasterDataContext();

            // customize the default Orders grid model with our custom settings

            var result = from dl in masterModel.DDeliveryLots
                         where dl.LotTypeId == 1 && dl.Status != 1
                         select new TabletSelectModel
                         {
                             Id = dl.Id,
                             Seq = dl.Seq,
                             LotNo = dl.LotNo,
                             PlannedPalletCount = dl.PlannedPalletCount,
                             PlannedTabletCount = dl.PlannedTabletCount.Value,
                             PlannedSendDate = dl.PlannedSendDate,
                             PlannedReceivedDate = dl.PlannedReceivedDate

                         };

            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            gridModel.TabletCountSelectGrid.DataSource = result;
            return gridModel.TabletCountSelectGrid.DataBind(result);
            //return gridModel.ToCountShipmentsGrid.DataBind(districtModel.DeliveryLots);
        }

        public ActionResult getCentralLotDDL()
        {
            var masterModel = new MasterDataContext();
            var result = from dl in masterModel.DDeliveryLots
                         where dl.LotTypeId == 1
                         select new 
                         {
                             Id = dl.Id,
                             Name = dl.LotNo + " (" + dl.PlannedReceivedDate.ToString() + ")"
                         };
            return Json(new SelectList(result.ToArray(), "Id", "Name"), JsonRequestBehavior.AllowGet);

        }

        #endregion

        #region TabletCountLotSelectReport

        public ActionResult TabletCountLotSelectReport()
        {
            var gridModel = new TabletCountSelectModel();
            var lotsGrid = gridModel.TabletCountSelectGrid;

            //// customize the default Orders grid model with custom settings
            //// NOTE: you need to call this method in the action that fetches the data as well,
            //// so that the models match
            IncludeMessages();

            //// Pass the custmomized grid model to the View
            return View(gridModel);

        }

        #endregion

        #region TabletCount

        public ActionResult TabletCount()
        {
            return RedirectToAction("TabletCountLotSelect");
        }

        [HttpPost]
        public ActionResult TabletCount(FormCollection collection)
        {
             //Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new TabletCountModel();
            var lotsGrid = gridModel.TabletCountGrid;
            Session["DeliveryLotID"] = collection[0];
             //customize the default Orders grid model with custom settings
             //NOTE: you need to call this method in the action that fetches the data as well,
             //so that the models match
            IncludeMessages();

            gridModel.DeliveryLotID = collection[0];
            int deliveryLotID = Convert.ToInt32(collection[0].ToString());

            var deliveryLotList = from deliveryLots in dbDelivery.DeliveryLots
                                  where deliveryLots.Id == deliveryLotID
                                  select deliveryLots;

            gridModel.LotNo = deliveryLotList.First().LotNo;

             //Pass the custmomized grid model to the View
            return View(gridModel);

        }

        public JsonResult TabletCountSearchGridDataRequested(int LotID = 2)
        {
             //Get both the grid Model and the data Model
             //The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new TabletCountModel();
            var masterModel = new MasterDataContext();
            if (Session["DeliveryLotID"] == null) return null;
            LotID = Convert.ToInt32(Session["DeliveryLotID"].ToString());
             //customize the default Orders grid model with our custom settings

            var result = from dl in masterModel.DDeliveryLot_Tablets
                         join tablet in masterModel.TTablets on dl.TabletSerialNo equals tablet.SerialNo
                         where dl.DeliveryLotId == LotID && dl.IsChecked == false
                         select new TabletCountQueryModel
                         {
                             SerialNo = dl.TabletSerialNo,
                             MacAddress = tablet.MacAddress,
                             IsAcceptable = dl.IsAcceptable.Value,
                             CheckingRemark = dl.CheckingRemark,
                             StartCheckingTime = dl.StartCheckingTime,
                             IsChecking = (dl.StartCheckingTime == null? false : true)
                         };

             //return the result of the DataBind method, passing the datasource as a parameter
             //jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            gridModel.TabletCountGrid.DataSource = result;
            return gridModel.TabletCountGrid.DataBind(result);
            //return gridModel.TabletMasterGrid.DataBind(masterModel.TTablets);
        }

        [HttpGet]
        public JsonResult TabletStartCheck(string rowId)
        {
            var masterModel = new MasterDataContext();

            //edit the record
            Boolean saveResult = true;
            try
            {
                var result = from dl in masterModel.DDeliveryLot_Tablets
                             where dl.TabletSerialNo == rowId
                             select dl;

                foreach (var item in result)
                {
                    item.StartCheckingTime = DateTime.Now;
                    masterModel.SubmitChanges();
                }
                saveLog("Start Checking Tablet: " + rowId, GlobalService.UserId, this.RouteData.Values["controller"].ToString(), this.RouteData.Values["action"].ToString(), System.Reflection.MethodBase.GetCurrentMethod().Name, false);
            }
            catch (Exception e)
            {
                saveLog("Error Save Checking Tablet: " + rowId, GlobalService.UserId, this.RouteData.Values["controller"].ToString(), this.RouteData.Values["action"].ToString(), System.Reflection.MethodBase.GetCurrentMethod().Name, true);
                saveResult = false;
            }

            return Json(saveResult, JsonRequestBehavior.AllowGet);
        }
        
        #endregion

        #region TabletCountInput

        public ActionResult TabletCountInput()
        {
            return RedirectToAction("TabletCountLotSelect");
        }

        [HttpPost]
        public ActionResult TabletCountInput(FormCollection collection)
        {
            //Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new TabletCountModel();
            var lotsGrid = gridModel.TabletCountGrid;
            Session["DeliveryLotID"] = collection[0];
            //customize the default Orders grid model with custom settings
            //NOTE: you need to call this method in the action that fetches the data as well,
            //so that the models match
            IncludeMessages();

            gridModel.DeliveryLotID = collection[0];
            int deliveryLotID = Convert.ToInt32(collection[0].ToString());

            var deliveryLotList = from deliveryLots in dbDelivery.DeliveryLots
                                  where deliveryLots.Id == deliveryLotID
                                  select deliveryLots;

            gridModel.LotNo = deliveryLotList.First().LotNo;

            //Pass the custmomized grid model to the View
            return View(gridModel);

        }

        public JsonResult TabletCountInputSearchGridDataRequested(int LotID = 2)
        {
            //Get both the grid Model and the data Model
            //The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new TabletCountModel();
            var masterModel = new MasterDataContext();
            if (Session["DeliveryLotID"] == null) return null;
            LotID = Convert.ToInt32(Session["DeliveryLotID"].ToString());
            //customize the default Orders grid model with our custom settings

            var result = from dl in masterModel.DDeliveryLot_Tablets
                         join tablet in masterModel.TTablets on dl.TabletSerialNo equals tablet.SerialNo
                         where dl.DeliveryLotId == LotID && dl.StartCheckingTime != null
                         select new TabletCountQueryModel
                         {
                             SerialNo = dl.TabletSerialNo,
                             MacAddress = tablet.MacAddress,
                             IsAcceptable = dl.IsAcceptable.Value,
                             CheckingRemark = dl.CheckingRemark,
                             StartCheckingTime = dl.StartCheckingTime,
                             IsChecking = (dl.StartCheckingTime == null ? false : true),
                             IsChecked = dl.IsChecked
                         };

            //return the result of the DataBind method, passing the datasource as a parameter
            //jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            gridModel.TabletCountGrid.DataSource = result;
            return gridModel.TabletCountGrid.DataBind(result);
            //return gridModel.TabletMasterGrid.DataBind(masterModel.TTablets);
        }

        public ActionResult TabletCountEditRows(TabletCountConfirmQueryModel editedRow)
        {
            //Get the grid and database (northwind) models
            var gridModel = new TabletCountModel();
            var masterModel = new MasterDataContext();

            if (gridModel.TabletCountGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
            {

                //delete the record
                var result = from dl in masterModel.TTablets
                             where dl.SerialNo == editedRow.SerialNo
                             select dl;

                foreach (var item in result)
                {
                    masterModel.TTablets.DeleteOnSubmit(item);
                    masterModel.SubmitChanges();
                }

            }

            if (gridModel.TabletCountGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
            {

                //edit the record
                try
                {
                    var result = from dl in masterModel.DDeliveryLot_Tablets
                                 join delivery in masterModel.DDeliveryLots on dl.DeliveryLotId equals delivery.Id
                                 where dl.TabletSerialNo == editedRow.SerialNo && delivery.LotTypeId == 1
                                 select dl;

                    foreach (var item in result)
                    {
                        item.IsChecked = true;
                        item.IsAcceptable = (editedRow.IsAcceptable == "1")? true : false;
                        item.IsLost = (editedRow.IsAcceptable == "3") ? true : false;
                        item.CheckingRemark = editedRow.CheckingRemark;
                        item.EndCheckingTime = DateTime.Now;
                        masterModel.SubmitChanges();
                        saveLog("Save Checking Tablet: " + editedRow.SerialNo, GlobalService.UserId, this.RouteData.Values["controller"].ToString(), this.RouteData.Values["action"].ToString(), System.Reflection.MethodBase.GetCurrentMethod().Name, false);
                    }
                }
                catch (Exception e)
                {
                    saveLog("Error Save Checking Tablet: " + editedRow.SerialNo, GlobalService.UserId, this.RouteData.Values["controller"].ToString(), this.RouteData.Values["action"].ToString(), System.Reflection.MethodBase.GetCurrentMethod().Name, true);
                }
            }
            return new ContentResult { Content = "" };
        }

        #endregion

        #region TabletCountReport

        public ActionResult TabletCountReport()
        {
            return RedirectToAction("TabletCountLotSelect");
        }
        [HttpPost]
        public ActionResult TabletCountReport(FormCollection collection)
        {
            var gridModel = new TabletCountReportModel();
            Session["DeliveryLotID"] = collection[0];
            int deliveryLotId = Convert.ToInt32(Session["DeliveryLotID"].ToString());
            var lotsGrid = gridModel.TabletCountReportGrid;

            //// customize the default Orders grid model with custom settings
            //// NOTE: you need to call this method in the action that fetches the data as well,
            //// so that the models match

            var allTablets = from deliveryLot_tablets in dbTablet.DeliveryLots_Tablets
                             where deliveryLot_tablets.DeliveryLotId == deliveryLotId
                             select deliveryLot_tablets.TabletSerialNo;
            gridModel.AllCount = allTablets.Count();

            var checkedTablets = from deliveryLot_tablets in dbTablet.DeliveryLots_Tablets
                                 where deliveryLot_tablets.DeliveryLotId == deliveryLotId
                                 && deliveryLot_tablets.IsChecked == true
                                 select deliveryLot_tablets.TabletSerialNo;
            gridModel.CheckedCount = checkedTablets.Count();

            var checkingTablets = from deliveryLot_tablets in dbTablet.DeliveryLots_Tablets
                                 where deliveryLot_tablets.DeliveryLotId == deliveryLotId
                                 && deliveryLot_tablets.StartCheckingTime != null && deliveryLot_tablets.IsChecked == false
                                 select deliveryLot_tablets.TabletSerialNo;
            gridModel.CheckingCount = checkingTablets.Count();

            var acceptableTablets = from deliveryLot_tablets in dbTablet.DeliveryLots_Tablets
                                    where deliveryLot_tablets.DeliveryLotId == deliveryLotId
                                    && deliveryLot_tablets.IsChecked == true
                                    && deliveryLot_tablets.IsAcceptable == true
                                    select deliveryLot_tablets.TabletSerialNo;
            gridModel.AcceptedCount = acceptableTablets.Count();

            var unacceptableTablets = from deliveryLot_tablets in dbTablet.DeliveryLots_Tablets
                                      where deliveryLot_tablets.DeliveryLotId == deliveryLotId
                                      && deliveryLot_tablets.IsChecked == true
                                      && deliveryLot_tablets.IsAcceptable == false
                                      select deliveryLot_tablets.TabletSerialNo;
            gridModel.RejectedCount = unacceptableTablets.Count();

            gridModel.DeliveryLotID = deliveryLotId;

            var deliveryLotList = from deliveryLots in dbDelivery.DeliveryLots
                                  where deliveryLots.Id == deliveryLotId
                                  select deliveryLots;

            gridModel.LotNo = deliveryLotList.First().LotNo;

            IncludeMessages();

            //// Pass the custmomized grid model to the View
            return View(gridModel);

        }

        // This method is called when the grid requests data
        public JsonResult TabletCountReportSearchGridDataRequested(int deliveryLotId = 2)
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new TabletCountReportModel();
            var masterModel = new MasterDataContext();

            if (Session["DeliveryLotID"] == null) return null;
            deliveryLotId = Convert.ToInt32(Session["DeliveryLotID"].ToString());
            // customize the default Orders grid model with our custom settings
            DateTime? nullDateTime = null;

            var result = from deliveryLot_tablets in dbTablet.DeliveryLots_Tablets
                             join tablets in dbTablet.Tablets
                                on deliveryLot_tablets.TabletSerialNo equals tablets.SerialNo
                             where deliveryLot_tablets.DeliveryLotId == deliveryLotId
                            select new TabletReportModel
                             {
                                 TabletSerialNo = deliveryLot_tablets.TabletSerialNo,
                                 MacAddress = tablets.MacAddress,
                                 IsChecked = deliveryLot_tablets.IsChecked,
                                 IsAcceptable = deliveryLot_tablets.IsAcceptable,
                                 CheckingRemark = deliveryLot_tablets.CheckingRemark,
                                 CheckingTimeLength = EntityFunctions.DiffMinutes(deliveryLot_tablets.StartCheckingTime,deliveryLot_tablets.EndCheckingTime),
                                 Updated = deliveryLot_tablets.IsChecked.Value ? deliveryLot_tablets.EndCheckingTime : nullDateTime,
                                 IsChecking = (deliveryLot_tablets.StartCheckingTime == null ? false : true)
                             };


            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            gridModel.TabletCountReportGrid.DataSource = result;
            return gridModel.TabletCountReportGrid.DataBind(result);
            //return gridModel.ToCountShipmentsGrid.DataBind(districtModel.DeliveryLots);
        }

        #endregion

        #region Repair Send, Receive

        public ActionResult ToRepair()
        {

            //Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new TabletCountModel();
            var lotsGrid = gridModel.TabletCountGrid;
            //customize the default Orders grid model with custom settings
            //NOTE: you need to call this method in the action that fetches the data as well,
            //so that the models match
            IncludeMessages();
            
            string DistrictID = "1001";
            var deliveryLotList = from districtTablets in dbDistrict.DistrictTablets
                                  where districtTablets.DistrictId == DistrictID
                                  select districtTablets;

            //Pass the custmomized grid model to the View
            return View(gridModel);
        }

        public JsonResult ToRepairSearchGridDataRequested(int LotID = 2)
        {
            //Get both the grid Model and the data Model
            //The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new TabletCountModel();
            var masterModel = new MasterDataContext();
            //customize the default Orders grid model with our custom settings

            var result = from dl in masterModel.DDeliveryLot_Tablets
                         join tablet in masterModel.TTablets on dl.TabletSerialNo equals tablet.SerialNo
                         where dl.DeliveryLotId == LotID && dl.IsChecked == false
                         select new TabletCountQueryModel
                         {
                             SerialNo = dl.TabletSerialNo,
                             MacAddress = tablet.MacAddress,
                             IsAcceptable = dl.IsAcceptable.Value,
                             CheckingRemark = dl.CheckingRemark,
                             StartCheckingTime = dl.StartCheckingTime
                         };

            //return the result of the DataBind method, passing the datasource as a parameter
            //jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            gridModel.TabletCountGrid.DataSource = result;
            return gridModel.TabletCountGrid.DataBind(result);
            //return gridModel.TabletMasterGrid.DataBind(masterModel.TTablets);
        }

        [HttpGet]
        public JsonResult SendRepairAction(string rowId)
        {
            var masterModel = new MasterDataContext();

            //edit the record
            Boolean saveResult = true;
            try
            {
                var result = from dl in masterModel.DDeliveryLot_Tablets
                             where dl.TabletSerialNo == rowId
                             select dl;

                foreach (var item in result)
                {
                    item.StartCheckingTime = DateTime.Now;
                    masterModel.SubmitChanges();
                }
                saveLog("Start Checking Tablet: " + rowId, GlobalService.UserId, this.RouteData.Values["controller"].ToString(), this.RouteData.Values["action"].ToString(), System.Reflection.MethodBase.GetCurrentMethod().Name, false);
            }
            catch (Exception e)
            {
                saveLog("Error Save Checking Tablet: " + rowId, GlobalService.UserId, this.RouteData.Values["controller"].ToString(), this.RouteData.Values["action"].ToString(), System.Reflection.MethodBase.GetCurrentMethod().Name, true);
                saveResult = false;
            }

            return Json(saveResult, JsonRequestBehavior.AllowGet);
        }

        public ActionResult ToRepairEditRows(TabletCountQueryModel editedRow)
        {
            //Get the grid and database (northwind) models
            var gridModel = new TabletCountModel();
            var masterModel = new MasterDataContext();

            if (gridModel.TabletCountGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
            {

                //delete the record
                var result = from dl in masterModel.TTablets
                             where dl.SerialNo == editedRow.SerialNo
                             select dl;

                foreach (var item in result)
                {
                    masterModel.TTablets.DeleteOnSubmit(item);
                    masterModel.SubmitChanges();
                }

            }

            if (gridModel.TabletCountGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
            {

                //edit the record
                try
                {
                    var result = from dl in masterModel.DDeliveryLot_Tablets
                                 where dl.TabletSerialNo == editedRow.SerialNo
                                 select dl;

                    foreach (var item in result)
                    {
                        item.IsChecked = true;
                        item.IsAcceptable = editedRow.IsAcceptable;
                        item.CheckingRemark = editedRow.CheckingRemark;
                        item.EndCheckingTime = DateTime.Now;
                        masterModel.SubmitChanges();
                        saveLog("Save Checking Tablet: " + editedRow.SerialNo, GlobalService.UserId, this.RouteData.Values["controller"].ToString(), this.RouteData.Values["action"].ToString(), System.Reflection.MethodBase.GetCurrentMethod().Name, false);
                    }
                }
                catch (Exception e)
                {
                    saveLog("Error Save Checking Tablet: " + editedRow.SerialNo, GlobalService.UserId, this.RouteData.Values["controller"].ToString(), this.RouteData.Values["action"].ToString(), System.Reflection.MethodBase.GetCurrentMethod().Name, true);
                }
            }
            return new ContentResult { Content = "" };
        }

        #endregion

        #region Allocate

        public ActionResult QuotaDistrict()
        {
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new DistrictCountModel();

            var countedLotsGrid = gridModel.CountedShipmentsGrid;
            var allocatedLotsGrid = gridModel.ToCountShipmentsGrid;

            // customize the default Orders grid model with custom settings
            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match

            IncludeMessages();

            // Pass the custmomized grid model to the View
            return View(gridModel);

        }

        // This method is called when the grid requests data
        public JsonResult AllocateSearchGridDataRequested()
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new DistrictCountModel();
            var masterModel = new MasterDataContext();

            // customize the default Orders grid model with our custom settings

            var result = from dl in masterModel.DDeliveryLots
                         join distributor in masterModel.DDistributors on dl.ReceiverId equals distributor.Id
                         where dl.LotTypeId == 1
                         select new LotOneModel
                         {
                             Id = dl.Id,
                             Seq = dl.Seq,
                             LotNo = dl.LotNo,
                             PlannedTabletCount = dl.PlannedTabletCount.Value,
                             RemainingTabletCount = dl.PlannedTabletCount - (from dlSub in masterModel.DDeliveryLots where dlSub.FromDeliveryLotId==dl.Id select dlSub).Sum(dlSub => dlSub.PlannedTabletCount),
                             ReceivedTabletCount = dl.ReceivedTabletCount.Value,
                             ActualReceivedDate = dl.ActualReceivedDate.Value
                         };



            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            gridModel.CountedShipmentsGrid.DataSource = result;
            return gridModel.CountedShipmentsGrid.DataBind(result);
            //return gridModel.ToCountShipmentsGrid.DataBind(districtModel.DeliveryLots);
        }


        // This method is called when the grid requests data
        public JsonResult CountSearchGridDataRequested()
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new DistrictCountModel();
            var masterModel = new MasterDataContext();

            // customize the default Orders grid model with our custom settings

            //var result = from dl in masterModel.DDeliveryLots
            //             join distributor in masterModel.DDistributors on dl.ReceiverId equals distributor.Id
            //             //join school in masterModel.SSchools on distributor.SchoolId equals school.Id into joinedSchool
            //             //from lotsWithSchool in joinedSchool.DefaultIfEmpty()
            //             //join district in masterModel.DDistricts on lotsWithSchool.DistrictId equals district.Id into joinedDistrict
            //             //from lotsWithSchoolAndDistrict in joinedDistrict.DefaultIfEmpty()
            //             where distributor.DistrictId == districtID.ToString()

            var result = from dl in dbDelivery.DeliveryLots
                         join distributor in dbDelivery.Distributors
                            on dl.ReceiverId equals distributor.Id
                         join district in dbDelivery.Districts
                            on distributor.DistrictId equals district.Id
                         into joinedDistrict
                         from lotsWithSchoolAndDistrict in joinedDistrict.DefaultIfEmpty()
                         where dl.LotTypeId == 2
                         select new ToReceiveModel
                         {
                             Id = dl.Id,
                             Seq = dl.Seq,
                             LotNo = dl.LotNo,
                             DistrictName = lotsWithSchoolAndDistrict.Name,
                             PlannedTabletcount = (int)dl.PlannedTabletCount,
                             PlannedSendDate = dl.PlannedSendDate.Value,
                             PlannedReceivedDate = dl.PlannedReceivedDate.Value
                         };



            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            gridModel.ToCountShipmentsGrid.DataSource = result;
            return gridModel.ToCountShipmentsGrid.DataBind(result);
            //return gridModel.ToCountShipmentsGrid.DataBind(districtModel.DeliveryLots);
        }

        public ActionResult CountEditRows(ToReceiveModel editedOrder)
        {
            // Get the grid and database (northwind) models
            var gridModel = new DistrictCountModel();
            var masterModel = new MasterDataContext();

            if (gridModel.ToCountShipmentsGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
            {

                // delete the record
                var result = from dl in masterModel.DDeliveryLots
                             where dl.Id == editedOrder.Id
                             select dl;

                foreach (var lot in result)
                {
                    masterModel.DDeliveryLots.DeleteOnSubmit(lot);
                    masterModel.SubmitChanges();
                }

            }

            return new ContentResult { Content = "" };
        }


        #endregion

        #region Send Tablets

        //
        // GET: /District/Count

        public ActionResult SendTablet()
        {
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new AdminSendTabletMasterModel();
            var studentGrid = gridModel.StudentMasterGrid;

            // customize the default Orders grid model with custom settings
            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            IncludeMessages();

            // Pass the custmomized grid model to the View
            return View(gridModel);

        }

        // This method is called when the grid requests data
        public JsonResult AdminSendtabletGridDataRequested(int schoolID = 100001)
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new StudentMasterModel();
            var masterModel = new MasterDataContext();

            // customize the default Orders grid model with our custom settings

            var result = from dl in masterModel.SStudents
                         where dl.SchoolId == "2345"
                         select dl;

            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            gridModel.StudentMasterGrid.DataSource = result;
            return gridModel.StudentMasterGrid.DataBind(result);
            //return gridModel.StudentMasterGrid.DataBind(masterModel.SStudents);
        }

        #endregion

        #region Receive Tablet

        public ActionResult ReceiveTablet()
        {
            //Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new AdminReceiveTabletModel();
            var lotsGrid = gridModel.TabletCountGrid;
            //customize the default Orders grid model with custom settings
            //NOTE: you need to call this method in the action that fetches the data as well,
            //so that the models match
            IncludeMessages();


            var deliveryLotList = from deliveryLots in dbDelivery.DeliveryLots
                                  
                                  select deliveryLots;

            gridModel.LotNo = deliveryLotList.First().LotNo;

            //Pass the custmomized grid model to the View
            return View(gridModel);

        }

        //public JsonResult TabletCountSearchGridDataRequested(int LotID = 2)
        //{
        //    //Get both the grid Model and the data Model
        //    //The data model in our case is an autogenerated linq2sql database based on Northwind.
        //    var gridModel = new TabletCountModel();
        //    var masterModel = new MasterDataContext();
        //    if (Session["DeliveryLotID"] == null) return null;
        //    LotID = Convert.ToInt32(Session["DeliveryLotID"].ToString());
        //    //customize the default Orders grid model with our custom settings
        //    TabletCountSetUpGrid(gridModel.TabletCountGrid);

        //    var result = from dl in masterModel.DDeliveryLot_Tablets
        //                 join tablet in masterModel.TTablets on dl.TabletSerialNo equals tablet.SerialNo
        //                 where dl.DeliveryLotId == LotID && dl.IsChecked == false
        //                 select new TabletCountQueryModel
        //                 {
        //                     SerialNo = dl.TabletSerialNo,
        //                     MacAddress = tablet.MacAddress,
        //                     IsAcceptable = dl.IsAcceptable.Value,
        //                     CheckingRemark = dl.CheckingRemark,
        //                     StartCheckingTime = dl.StartCheckingTime

        //                 };

        //    //return the result of the DataBind method, passing the datasource as a parameter
        //    //jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
        //    gridModel.TabletCountGrid.DataSource = result;
        //    return gridModel.TabletCountGrid.DataBind(result);
        //    //return gridModel.TabletMasterGrid.DataBind(masterModel.TTablets);
        //}


        //[HttpGet]
        //public JsonResult TabletStartCheck(string rowId)
        //{
        //    var masterModel = new MasterDataContext();

        //    //edit the record
        //    Boolean saveResult = true;
        //    try
        //    {
        //        var result = from dl in masterModel.DDeliveryLot_Tablets
        //                     where dl.TabletSerialNo == rowId
        //                     select dl;

        //        foreach (var item in result)
        //        {
        //            item.StartCheckingTime = DateTime.Now;
        //            masterModel.SubmitChanges();
        //        }
        //        saveLog("Start Checking Tablet: " + rowId, GlobalService.UserId, this.RouteData.Values["controller"].ToString(), this.RouteData.Values["action"].ToString(), System.Reflection.MethodBase.GetCurrentMethod().Name, false);
        //    }
        //    catch (Exception e)
        //    {
        //        saveLog("Error Save Checking Tablet: " + rowId, GlobalService.UserId, this.RouteData.Values["controller"].ToString(), this.RouteData.Values["action"].ToString(), System.Reflection.MethodBase.GetCurrentMethod().Name, true);
        //        saveResult = false;
        //    }

        //    return Json(saveResult, JsonRequestBehavior.AllowGet);
        //}

        //public ActionResult TabletCountEditRows(TabletCountQueryModel editedRow)
        //{
        //    //Get the grid and database (northwind) models
        //    var gridModel = new TabletCountModel();
        //    var masterModel = new MasterDataContext();

        //    if (gridModel.TabletCountGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
        //    {

        //        //delete the record
        //        var result = from dl in masterModel.TTablets
        //                     where dl.SerialNo == editedRow.SerialNo
        //                     select dl;

        //        foreach (var item in result)
        //        {
        //            masterModel.TTablets.DeleteOnSubmit(item);
        //            masterModel.SubmitChanges();
        //        }

        //    }

        //    if (gridModel.TabletCountGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
        //    {

        //        //edit the record
        //        try
        //        {
        //            var result = from dl in masterModel.DDeliveryLot_Tablets
        //                         where dl.TabletSerialNo == editedRow.SerialNo
        //                         select dl;

        //            foreach (var item in result)
        //            {
        //                item.IsChecked = true;
        //                item.IsAcceptable = editedRow.IsAcceptable;
        //                item.CheckingRemark = editedRow.CheckingRemark;
        //                item.EndCheckingTime = DateTime.Now;
        //                masterModel.SubmitChanges();
        //                saveLog("Save Checking Tablet: " + editedRow.SerialNo, GlobalService.UserId, this.RouteData.Values["controller"].ToString(), this.RouteData.Values["action"].ToString(), System.Reflection.MethodBase.GetCurrentMethod().Name, false);
        //            }
        //        }
        //        catch (Exception e)
        //        {
        //            saveLog("Error Save Checking Tablet: " + editedRow.SerialNo, GlobalService.UserId, this.RouteData.Values["controller"].ToString(), this.RouteData.Values["action"].ToString(), System.Reflection.MethodBase.GetCurrentMethod().Name, true);
        //        }
        //    }
        //    return new ContentResult { Content = "" };
        //}


        #endregion

        #region ClaimCenter

        public ActionResult ClaimCenter()
        {
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new ClaimCenterMasterModel();
            var lotsGrid = gridModel.ClaimCenterMasterGrid;

            // customize the default Orders grid model with custom settings
            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            IncludeMessages();
            // Pass the custmomized grid model to the View

            return View(gridModel);

        }

        // This method is called when the grid requests data
        public JsonResult ClaimCenterSearchGridDataRequested(string searchText = "")
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new ClaimCenterMasterModel();
            var masterModel = new MasterDataContext();

            // customize the default Orders grid model with our custom settings

            var result = from dl in masterModel.CClaimCenters
                         where dl.Address.Contains(searchText) || dl.Name.Contains(searchText)
                         select dl;

            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            gridModel.ClaimCenterMasterGrid.DataSource = result;
            return gridModel.ClaimCenterMasterGrid.DataBind(result);

            //gridModel.DistrictMasterGrid.DataSource = result;
            //return gridModel.DistrictMasterGrid.DataBind(result);
            //return gridModel.DistrictMasterGrid.DataBind(masterModel.DDistricts);
        }


        public ActionResult ClaimCenterEditRows(CClaimCenter editedRow)
        {
            // Get the grid and database (northwind) models
            var gridModel = new ClaimCenterMasterModel();
            var masterModel = new MasterDataContext();

            if (gridModel.ClaimCenterMasterGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
            {

                // delete the record
                var result = from dl in masterModel.CClaimCenters
                             where dl.Id == editedRow.Id
                             select dl;

                foreach (var item in result)
                {
                    masterModel.CClaimCenters.DeleteOnSubmit(item);
                    masterModel.SubmitChanges();
                }

            }

            if (gridModel.ClaimCenterMasterGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
            {

                // delete the record
                var result = from dl in masterModel.CClaimCenters
                             where dl.Id == editedRow.Id
                             select dl;

                foreach (var item in result)
                {
                    item.Name = editedRow.Name;
                    item.Phone = editedRow.Phone;
                    item.Fax = editedRow.Fax;
                    item.Address = editedRow.Address;
                    item.ContactName = editedRow.ContactName;
                    masterModel.SubmitChanges();
                }

            }

            if (gridModel.ClaimCenterMasterGrid.AjaxCallBackMode == AjaxCallBackMode.AddRow)
            {
                bool error = false;
                string errorMessage = "";
                JQGrid grid = new JQGrid();
                CClaimCenter item = new CClaimCenter();
                item.Name = editedRow.Name;
                item.Address = editedRow.Address;
                if (item.Name == null)
                {
                    error = true;
                    errorMessage = "กรุณากรอกชื่อศูนย์ซ่อม";
                }
                if (item.Address == null)
                {
                    error = true;
                    errorMessage = "กรุณากรอกทื่อยู่ศูนย์ซ่อม";
                }
                item.Phone = editedRow.Phone;
                item.Fax = editedRow.Fax;
                item.Address = editedRow.Address;
                item.ContactName = editedRow.ContactName;
                if (!error)
                {
                    masterModel.CClaimCenters.InsertOnSubmit(item);
                    masterModel.SubmitChanges();
                }


                //string error = "";
                //JQGrid grid = new JQGrid();
                //CClaimCenter item = new CClaimCenter();
                //item.Name = editedRow.Name;
                //item.Address = editedRow.Address;
                //if (item.Name == "" || item.Name == null) error = "กรุณากรอกชื่อศูนย์ซ่อม";
                //if (item.Address == "" || item.Address == null) error = "กรุณากรอกทื่อยู่ศูนย์ซ่อม";
                //item.Phone = editedRow.Phone;
                //item.Fax = editedRow.Fax;
                //item.Address = editedRow.Address;
                //item.ContactName = editedRow.ContactName;
                //if (error == "")
                //{
                //    masterModel.CClaimCenters.InsertOnSubmit(item);
                //    masterModel.SubmitChanges();
                //}
                //else return grid.ShowEditValidationMessage("abc");
            }

            return new ContentResult { Content = "" };
        }

        public ActionResult getClaimCenterDDL()
        {
            var masterModel = new MasterDataContext();
            var result = from dl in masterModel.CClaimCenters
                         orderby dl.Name
                         select dl;
            return Json(new SelectList(result.ToArray(), "Id", "Name"), JsonRequestBehavior.AllowGet);
            //return PartialView();
        }

        #endregion

        #region News List

        public ActionResult NewsList()
        {
            //Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new NewsMasterModel();
            var lotsGrid = gridModel.NewsListGrid;
            //customize the default Orders grid model with custom settings
            //NOTE: you need to call this method in the action that fetches the data as well,
            //so that the models match
            IncludeMessages();

            //Pass the custmomized grid model to the View
            return View(gridModel);

        }

        public JsonResult NewsListSearchGridDataRequested(string searchText = "")
        {
            //Get both the grid Model and the data Model
            //The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new NewsMasterModel();
            var masterModel = new MasterDataContext();

            var result = from news in masterModel.NNewsItems
                         where news.Title.Contains(searchText) || news.Detail.Contains(searchText)
                         orderby news.Updated descending
                         select new
                         {
                             Id = news.Id,
                             Title = news.Title,
                             Date = news.Created,
                             ReadCount = news.ReadCount,
                             Published = news.isPublished ? "เผยแพร่" : "ยังไม่เผยแพร่"
                         };

            //return the result of the DataBind method, passing the datasource as a parameter
            //jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            gridModel.NewsListGrid.DataSource = result;
            return gridModel.NewsListGrid.DataBind(result);
            //return gridModel.TabletMasterGrid.DataBind(masterModel.TTablets);
        }

        public ActionResult NewsListEditRows(NNewsItem editedRow)
        {
            // Get the grid and database (northwind) models
            var gridModel = new NewsMasterModel();
            var masterModel = new MasterDataContext();

            if (gridModel.NewsListGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
            {

                // delete the record
                var result = from dl in masterModel.NNewsItems
                             where dl.Id == editedRow.Id
                             select dl;

                foreach (var item in result)
                {
                    masterModel.NNewsItems.DeleteOnSubmit(item);
                    masterModel.SubmitChanges();
                }

            }

            if (gridModel.NewsListGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
            {

                // delete the record
                var result = from dl in masterModel.NNewsItems
                             where dl.Id == editedRow.Id
                             select dl;

                foreach (var item in result)
                {
                    item.Title = editedRow.Title;
                    item.Detail = editedRow.Detail;
                    masterModel.SubmitChanges();
                }

            }

            if (gridModel.NewsListGrid.AjaxCallBackMode == AjaxCallBackMode.AddRow)
            {

                // delete the record
                var result = from dl in masterModel.NNewsItems
                             where dl.Id == editedRow.Id
                             select dl;
                NNewsItem item = new NNewsItem();
                item.Title = editedRow.Title;
                item.Detail = editedRow.Detail;
                masterModel.NNewsItems.InsertOnSubmit(item);
                masterModel.SubmitChanges();


            }

            return new ContentResult { Content = "" };
        }

        #endregion

        #region Utility

        protected void saveLog(string message, Nullable<int> userId, string controllerName, string actionName, string processName, bool isError = false)
        {
            try
            {
                #region Check invalid parameters
                if (message == null) throw new ArgumentNullException("Parameter message is null.");
                if (controllerName == null) throw new ArgumentNullException("Parameter controllerName is null.");
                if (actionName == null) throw new ArgumentNullException("Parameter actionName is null.");
                if (processName == null) throw new ArgumentNullException("Parameter processName is null.");
                #endregion

                SystemLogDBContext dbLog = new SystemLogDBContext();

                Log newLog = new Log();

                newLog.DateTime = DateTime.Now;
                newLog.IsError = isError;
                newLog.SC03_UserId = userId;
                newLog.Message = message;
                newLog.Controller = controllerName;
                newLog.Action = actionName;
                newLog.Process = processName;

                dbLog.Logs.Add(newLog);
                dbLog.SaveChanges();
            }
            catch (ArgumentNullException e)
            {
                saveLog(e.Message + " contollerName = " + controllerName + ", actionName = " + actionName + ", processName = " + processName + ".",
                    userId, "Log", "saveLog", "saveLog", true);
            }
            catch (Exception e)
            {

            }
        }



        protected string[] uploadFile(HttpPostedFileBase file, string filePath)
        {
            string newFileName = "";
            string newFilePath;
            int userId = 0;

            try
            {
                // Verify that the user selected a file
                if (file != null && file.ContentLength > 0)
                {
                    var uploadedfileName = Path.GetFileName(file.FileName);
                    string fileExtension = Path.GetExtension(file.FileName);

                    // Check extension of uploaded file
                    //if (!(fileExtension == ".xlsx" || fileExtension == ".xls")) throw new ArgumentOutOfRangeException("Invild file. The system can be received only excel file");


                    #region Check directory for upload file
                    newFilePath = filePath + "\\" + DateTime.Today.ToString("yyyy-MM-dd");
                    if (!System.IO.Directory.Exists(newFilePath))
                    {
                        System.IO.Directory.CreateDirectory(newFilePath);
                    }
                    #endregion


                    #region Check and rename file name for download file
                    string[] componentFileName = uploadedfileName.Split('.');
                    for (int i = 0; i < componentFileName.Count() - 1; i++)
                    {
                        newFileName = newFileName + componentFileName[i];
                    }

                    if (System.IO.File.Exists(newFilePath + "\\" + newFileName + "." + componentFileName[componentFileName.Count() - 1]))
                    {
                        for (int i = 1; i < 100; i++)
                        {
                            if (!System.IO.File.Exists(newFileName + "(" + i + ")." + componentFileName[componentFileName.Count() - 1]))
                            {
                                newFileName = newFileName + "(" + i + ")." + componentFileName[componentFileName.Count() - 1];
                                break;
                            }
                        }
                    }
                    else
                    {
                        newFileName = newFileName + "." + componentFileName[componentFileName.Count() - 1];
                    }
                    #endregion

                    var path = Path.Combine(newFilePath, newFileName);

                    file.SaveAs(path);
                    return new string[] { newFileName, newFilePath };
                }
                else
                {
                    return new string[] { "ไม่สามารถอัพโหลดไฟล์ได้ ระบบไม่พบไฟล์ที่ต้องการอัพโหลด กรุณาตรวจสอบไฟล์ที่อัพโหลดอีกครั้งหรือติดต่อผู้ดูแลระบบ" };
                }
            }
            catch (Exception e)
            {
                saveLog(e.Message, userId, this.RouteData.Values["controller"].ToString(), this.RouteData.Values["action"].ToString(), System.Reflection.MethodBase.GetCurrentMethod().Name, true);
                if (e is ArgumentOutOfRangeException) return new string[] { e.Message };
                return new string[] { "ไม่สามารถอัพโหลดไฟล์ได้ กรุณาติดต่อผู้ดูแลระบบ" };
            }
        }

        #endregion

        #region Scaffold
        //
        // GET: /Master/Details/5

        public ActionResult Details(int id)
        {
            return View();
        }

        //
        // GET: /Master/Create

        public ActionResult Create()
        {
            return View();
        } 

        //
        // POST: /Master/Create

        [HttpPost]
        public ActionResult Create(FormCollection collection)
        {
            try
            {
                // TODO: Add insert logic here

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }
        
        //
        // GET: /Master/Edit/5
 
        public ActionResult Edit(int id)
        {
            return View();
        }

        //
        // POST: /Master/Edit/5

        [HttpPost]
        public ActionResult Edit(int id, FormCollection collection)
        {
            try
            {
                // TODO: Add update logic here
 
                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }

        //
        // GET: /Master/Delete/5
 
        public ActionResult Delete(int id)
        {
            return View();
        }

        //
        // POST: /Master/Delete/5

        [HttpPost]
        public ActionResult Delete(int id, FormCollection collection)
        {
            try
            {
                // TODO: Add delete logic here
 
                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }
        #endregion
    }
}
